class DependencyConnector {
  constructor( dependencyLinks, expression ){
  	this.dependencyLinks = dependencyLinks || {};
  	this.expressionCallback = expression;
  	this.toloadDependencyKeys = Object.keys( this.dependencyLinks );
    this.nextDependencyLoad();
  }
  
  nextDependencyLoad(){
  	if( this.toloadDependencyKeys.length ){
    	const nextLinkKey = this.toloadDependencyKeys.shift();
      const nextLink = this.dependencyLinks[ nextLinkKey ];
      fetch( nextLink ).then( ( data ) => {
        	data.text().then( ( resultText ) => {
              const nextScriptText = resultText;
              const nextScriptElement = document.createElement( 'script' );
              nextScriptElement.type = 'text/javascript';
              nextScriptElement.id = 'customScript_' + nextLinkKey;
              nextScriptElement.text = nextScriptText;
              document.head.appendChild( nextScriptElement );
		          console.log( 'loaded: ', nextLinkKey, ' [' + nextLink + ']' );
              this.nextDependencyLoad()
          }, () => {} );
      } );
    } else {
    	this.expressionCallback();
    }
  }
  
};

// USAGE ---->
/*
new DependencyConnector( {
  jQuery: 'https://code.jquery.com/jquery-3.4.1.min.js', // for test
  THREE: 'https://cdnjs.cloudflare.com/ajax/libs/three.js/107/three.min.js'
}, () => {

    console.log( { $ } );
    console.log( { THREE } );
    
});
*/
